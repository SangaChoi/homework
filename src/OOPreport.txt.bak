1. OOP(Object Oriented Programming)
- 객체 지향 프로그래밍
- Real World를 컴퓨터 시스템으로 표현하는 방법론


2. Object(객체)
- Real World에서 표현되는 모든 것
- 식별성
ex) 이름
- Attribute (속성)
자바의 Field
ex) 배가 고프다. 배가 부르다.
- Behavior (동작)
자바의 Method
ex) 밥을 먹는다.


3. Class
- 객체를 추상화하여 표현한 것
ex) 보드마카의 색상, 사이즈, 제조사


4. abstraction(추상화)
- 객체를 구분하는 특징, 공통점
ex) 코끼리, 독수리, 전화기, 모니터를 추상화
사물 -> 기계, 동물 -> 수신, 가전, 동물


5. Generalization(일반화) / Inheritance(상속)
- 객체를 일반적인 특징으로 추상화. 추상화 수준이 높다.
ex) 4번의 사물
- 객체의 추상화 수준에 따라 계층화 된다.
- 추상화 수준이 낮은 클래스(구체적)가 추상화 수준이 높은 클래스의 특징을 상속받는다.


6. Specialization(구체적)
- 객체를 구체적인 특징으로 추상화. 추상화 수준이 낮다.
ex) 4번의 수신, 가전, 동물
- 일반적인 클래스를 공유하여 구체적인 클래스만 정의 -> 확장성, 재사용성, 일관성, 유지관리성


7. Realization
- 실체화, 인터페이스를 구현


8. Association
- 연관. 클래스의 관계


9. dependency
- 의존성
- 전체가 부분에 의존한다.


10. Polymorphism
- 다형성
- 동일한 인터페이스를 사용할 수 있도록 한다.
ex) 자동차가 달라도 운전을 할 수 있다.
- 다형성을 지원하기 위해 오버로딩, 오버라이딩 등의 문법을 사용

11. Encapsulation / 절차은닉 / 정보은닉
- 특정한 정보는 공개하고 특정한 정보는 공개하지 않는다.
ex) 비밀번호
- 정보은닉
외부에서 내부를 들여다볼 수 없다.